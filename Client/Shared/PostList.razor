@inject HttpService<PostResponse> httpService

<div class="posts-container">
    @if (posts is null)
    {
        for (int i = 0; i < 2; i++)
        {
            <div class="skeleton-container">
                <div class="skeleton-top">
                    <div class="skeleton-img"></div>
                    <div class="skeleton-info"></div>
                    <div class="skeleton-btn"></div>
                </div>
                <div class="skeleton-content small"></div>
                <div class="skeleton-content @(i == 1 ? "image" : null)"></div>
                <div class="skeleton-actions">
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </div>
        }
    }
    else
    {
        if (posts.Posts.Count == 0)
        {
            <div class="empty">
                @if (homePage)
                {
                    <div>
                        <img height="100" src="./images/explore.png" />
                        <span>Follow other users to see what they post</span>
                    </div>
                    <a href="Explore" class="button-bg">Explore</a>
                }
                else
                {
                    <div class="empty-profile">
                        <img height="130" src="./images/cactus.png" />
                        <img height="50" src="./images/tumbleweed.png" />
                        <span>No posts yet</span>
                    </div>
                }
            </div>
        }

        foreach (var post in posts.Posts)
        {
            <PostComponent post="post"/>
        }
        if (posts.TotalPages > page)
        {
            <button class="button-bg" @onclick="LoadMore">Load More</button>
        }
    }
</div>

@code {
    [Parameter]
    public string? id { get; set; }

    [Parameter]
    public bool homePage { get; set; }

    public PostResponse? posts;
    private int page = 1;

    protected override async Task OnParametersSetAsync()
    {
        page = 1;
        posts = await GetPosts(id);
    }

    public async Task RefreshPosts()
    {
        page = 1;
        posts = null;
        StateHasChanged();

        posts = await GetPosts(id);
        StateHasChanged();
    }

    private async Task<PostResponse?> GetPosts(string? id)
    {
        PostResponse? response;
        if(homePage)
        {
            (response, var error) = await httpService.GetAsync($"Posts/GetPosts/{page}");
        }
        else 
        {
            (response, var error) = await httpService.GetAsync($"Posts/GetUserPosts/{id}/{page}");
        }
        return response;
    }

    private async Task LoadMore()
    {
        page++;
        var response = await GetPosts(id);
        posts!.Posts.AddRange(response?.Posts!);
    }
}